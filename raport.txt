W moim rozwiązaniu drużyny X zapisują każdy obliczony wynik (nie tylko ten ostateczny) do std::map. Zanim wywołają dalsze obliczenia dla liczby n, sprawdzają, czy wartość dla niej nie została już wcześniej obliczona i umieszczona w mapie. Ponieważ mapa, jak właściwie każda inna sturktura danych pozwalająca na szybki dostęp do konkretnego wyniku i dynamiczne wstawianie wyników, potrzebuje dynamicznej alokacji pamięci, nie udało mi się jej użyć w pamięci współdzielonej między procesami. Dlatego zespoły NewProcessesX i ConstProcesses z X mają mniej optymalne rozwiązanie - korzystają po prostu z talicy o rozmiarze N = 10000, gdzie zapisują wyniki obliczone dla liczb < N. 
Jeśli chodzi o zmiany w dostarczonych plikach, to dodałam atrybut bool share do klasy Team, żeby móc wygodniej odifowywać w runContest, czy mam go przeprowadzać dla drużyny z X czy bez X. share = true oznacza, że drużyna jest z X, share = false, że bez X.  
Swoje rozwiązanie testowałam na moim komputerze oraz studentsie (na tym drugim potrzebowałam komendy "ulimit -s 128", niestety mimo to czasem mam bad alloc). 
Opis mojego komputera: 
Architektura:           x86_64
Tryb(y) pracy CPU:      32-bit, 64-bit
Kolejność bajtów:       Little Endian
CPU:                    8
Lista aktywnych CPU:    0-7
Wątków na rdzeń:        2
Rdzeni na gniazdo:      4
Gniazd:                 1
Węzłów NUMA:            1
ID producenta:          GenuineIntel
Rodzina CPU:            6
Model:                  142
Nazwa modelu:           Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz
Wersja:                 10
CPU MHz:                943.210
CPU max MHz:            3400,0000
CPU min MHz:            400,0000
BogoMIPS:               3600.00
Wirtualizacja:          VT-x
Cache L1d:              32K
Cache L1i:              32K
Cache L2:               256K
Cache L3:               6144K
Procesory węzła NUMA 0: 0-7
Opis środowiska students:
Architektura:                    x86_64
Tryb(y) pracy CPU:               32-bit, 64-bit
Kolejność bajtów:                Little Endian
Rozmiary adresów:                40 bits physical, 48 bits virtual
CPU:                             64
Lista aktywnych CPU:             0-63
Wątków na rdzeń:                 1
Rdzeni na gniazdo:               1
Gniazd:                          64
Węzłów NUMA:                     1
ID producenta:                   GenuineIntel
Rodzina CPU:                     6
Model:                           85
Nazwa modelu:                    Intel Xeon Processor (Skylake, IBRS)
Wersja:                          4
CPU MHz:                         2095.078
BogoMIPS:                        4190.15
Producent hipernadzorcy:         KVM
Typ wirtualizacji:               pełna
Cache L1d:                       2 MiB
Cache L1i:                       2 MiB
Cache L2:                        256 MiB
Cache L3:                        1 GiB
Procesory węzła NUMA 0:          0-63

Wszystkie wykresy przedstawiają średnie czasy działania (z podziałem na size lub bez) poszczególnych drużyn odpowiednio na moim komuterze i studentsie. Wszystkie czasy wyrażone są w milisekundach. 
Spostrzeżenia:
1. Czas nie różni się za bardzo pomiędzy poszczególnymi wykonaniami programu. 
2. Najwolniejszą drużyną jest zdecydowanie TeamNewProcesses, ponieważ tworzy ona dużo nowych procesów, co jest szczególnie ciężką operacją. W wersji z X nie jest ona dużo szybsza, a czasem nawet wolniejsza, ponieważ wyjątkowo dużo czasu zajmuje alokacja dzielonej tablicy o rozmiarze 10^4. Z jakiegoś powodu działa ona dużo wolniej na students niż na moim laptopie. 
3. TeamSolo również działa wolniej na students, pozostałe drużyny działają podobnie. 
4. Najszybciej działają drużyny dla size = 4. Szczególne przyspieszenie występuje dla wszystkich drużyn na wszystkich urządzeniach między size = 1, a size = 2. Dla students występuje minimalne przyspieszenie dla size > 4, na moim laptopie nie ma różnicy - wynika to prawdopodobnie z tego, że students może robić więcej rzeczy współbieżnie. 
5. Drużyny z X (oprócz NewProcesses i NewThreads) działają istotnie szybciej, niż drużyny bez X. Oznacza to, że mimo, że zapisywanie do mapy zajmuje dodatkowy czas, opłaca się to robić, natomiast tablica dla 10^4 najmniejszych liczb niewiele daje. Próbowałam zrobić taką o rozmiarze 10^6, ale zużywa ona dużo pamięci i czas alokacji jest ogromny. 
6. TeamNewThreads jest zasadniczo szybsze, niż TeamConstThreads. TeamNewThreads co prawda tworzy więcej nowych wątków, ale ma pewną zaletę - w ConstThreads jeden wątek może dostać np. trzy trudne obliczenia, a drugi trzy łatwe, natomiast w NewThreads joinuję pierwszy wątek, który się zakończy (rozwiązuję to wrzucając numery końcżących się wątków do kolejki).  
7. Właściwie to NewThreads zdaje się być najszybszą drużyną z bezXowych, co jest dla mnie nieco zaskakujące, bo Async i Pool powinny być bardziej zoptymalizowane, niż tworzenie nowych wątków na pałę. 
8. Spośród drużyn z X ciężko wyłonić najszybszą, bo mają one bardzo podobne czasy (poza drużynami procesowymi).
9. Ciekawe jest, że dla drużyny ConstProcesses obserwujemy niemal dwukrotną różnicę czasu pomiędzy size = 7 a size = 4 na studentsie. Na laptopie jej prawie nie ma. Dla NewProcesses również jej nie ma. Dla Pool również jest taka różnica, dla size = 10 działa nawet jeszcze szybciej na studentsie, w sumie około 8 razy szybciej, niż dla size = 1. 

10. 
10. 

